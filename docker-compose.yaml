version: '3.8'

services:
  db:
    image: postgres:latest # Il nome del Dockerfile (opzionale se è chiamato "Dockerfile")
    container_name: Database
    environment:
      POSTGRES_PASSWORD: adminPW
      POSTGRES_USER: postgres
      POSTGRES_DB: SoundSphereDB
    volumes:
      - ./DBdata:/var/lib/postgresql/data  # Monta tutta la directory dei dati
    ports:
      - "5432:5432"
    networks:
      - app_network  # Aggiungi il servizio db alla rete comune
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "SoundSphereDB" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s

  backend:
    build: .
    container_name: springbootbackend
    ports:
      - "8080:8080"
      - "127.0.0.1:5005:5005"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DEBUG_MODE: ${DEBUG_MODE:-false}
    volumes:
      - gradle_cache:/home/gradle/.gradle
      - openapi-spec:/app/openapi
    command: >
      sh -c "
          if [ \"$API_UPDATE\" != \"false\" ]; then  # Controlla se API_UPDATE è diverso da false
              ./gradlew generateOpenApiDocs --no-daemon;  # Esegui solo se API_UPDATE non è false
          fi &&
          ./gradlew bootRun --no-daemon
        "
    networks:
      - app_network  # Collega il backend alla rete comune

volumes:
  db_data:
  gradle_cache:
  openapi-spec:
    name: openapi-spec


networks:
  app_network:
    driver: bridge
    name: app_network
