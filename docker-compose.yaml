version: '3.8'

services:
  db:
    image: postgres:17.1-bookworm # Il nome del Dockerfile (opzionale se Ã¨ chiamato "Dockerfile")
    container_name: Database
    environment:
      POSTGRES_PASSWORD: adminPW
      POSTGRES_USER: postgres
      POSTGRES_DB: SoundSphereDB

    volumes:
      - ./DBdata:/var/lib/postgresql/data  # Monta tutta la directory dei dati
    ports:
      - "5432:5432"
    networks:
      - app_network  # Aggiungi il servizio db alla rete comune
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "SoundSphereDB" ]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s

  backend:
    build: .
    container_name: springbootbackend
    ports:
      - "8080:8080"
      - "127.0.0.1:5005:5005"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DEBUG_MODE: ${DEBUG_MODE:-false}
      APPLICATION_SECURITY_JWT_SECRET_KEY: "dZdUCghahmQ9KDUs1gKhQjTa6Jw4XWEgDCj3EBRtzESrd8XjqsxzJT7LMfJsqmOZh+Co+HHEuvefZLFg0GBX4g=="
      APPLICATION_SECURITY_JWT_EXPIRATION: "86400000"  # 1 giorno in millisecondi
    volumes:
      - gradle_cache:/home/gradle/.gradle
      - openapi-spec:/app/openapi
      - ./appdata:/app/data
    command: >
      sh -c "
                if [ \"$API_UPDATE\" != \"false\" ]; then
                    # 1. Genera il file YAML
                    ./gradlew generateOpenApiDocs --no-daemon;
                    # 2. Esegui lo script Python per normalizzarlo
                    python3 /app/scripts/renameMethodOpenAPI.py /app/openapi/openapi.yaml;
                fi &&
                # 3. Avvia l'applicazione
                ./gradlew bootRun --no-daemon
            "
    networks:
      - app_network  # Collega il backend alla rete comune

volumes:
  db_data:
  gradle_cache:
  openapi-spec:
    name: openapi-spec


networks:
  app_network:
    driver: bridge
    name: app_network
