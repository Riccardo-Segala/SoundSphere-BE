plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.springdoc.openapi-gradle-plugin' version "1.9.0"
}

group = 'it.unife.sample'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

repositories {
	mavenCentral()
}

bootRun {
	// Sovrascrive completamente le opzioni JVM che Gradle usa in debug
	if (System.getenv("DEBUG_MODE") == "true") {
		jvmArgs = [
				"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005"
		]
	}

	systemProperties 'application.security.jwt.secret-key': System.getenv('APPLICATION_SECURITY_JWT_SECRET_KEY')
	systemProperties 'application.security.jwt.expiration': System.getenv('APPLICATION_SECURITY_JWT_EXPIRATION')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.postgresql:postgresql:42.2.5'
	implementation 'org.liquibase:liquibase-core:4.15.0' // Aggiungi Liquibase
	implementation 'org.springframework.boot:spring-boot-starter-jdbc' // Per il supporto JDBC
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'



	compileOnly 'org.projectlombok:lombok'
	implementation 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	runtimeOnly 'org.postgresql:postgresql:42.2.5'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
}

openApi {
	outputDir.set(layout.projectDirectory.dir("openapi"))
	outputFileName = "openapi.yaml"
}

tasks.named('test') {
	useJUnitPlatform()
}
